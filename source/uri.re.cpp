/* Generated by re2c 3.1 */
#line 1 "source/uri.re"
// -*- c++ -*- //

// The SEL extension library
// Free software published under the MIT license.

#include "sel/uri.hpp"
#include <string.h>

namespace sel
{

#line 32 "source/uri.re"


struct uri::internal
{
    unsigned int m_flags = 0;
    std::string m_scheme;
    std::string m_username;
    std::string m_password;
    std::string m_host;
    uint16_t m_port = 0;
    std::string m_path;
    std::vector<attribute> m_query;
    std::string m_fragment;
    static bool parse_query(std::string_view string, std::vector<attribute> &qa);
    size_t hash_code(size_t seed) const noexcept;
    int compare(const internal &other) const noexcept;
    bool operator==(const internal &other) const noexcept;
};

uri::uri(const uri &other)
    : m_priv(other.m_priv ? new internal(*other.m_priv) : nullptr)
{
}

uri &uri::operator=(const uri &other)
{
    if (this != &other)
        m_priv.reset(other.m_priv ? new internal(*other.m_priv) : nullptr);
    return *this;
}

uri uri::parse(std::string_view string)
{
    uri uri;
    uri::internal *priv = new uri::internal;
    uri.m_priv.reset(priv);
    std::string_view authority_and_path;

    {
        const char *cursor = string.data();
        const char *limit = cursor + string.size();
        const char *marker [[maybe_unused]];
        const char *s1, *s2, *ap1, *ap2, *q1, *q2, *f1, *f2, *e1, *e2;
        
#line 60 "source/uri.re.cpp"
const char *yyt1;
const char *yyt2;
const char *yyt3;
const char *yyt4;
const char *yyt5;
const char *yyt6;
const char *yyt7;
const char *yyt8;
const char *yyt9;
#line 75 "source/uri.re"



#line 74 "source/uri.re.cpp"
{
	int yych;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '#':
			yyt1 = NULL;
			yyt2 = cursor;
			yyt3 = cursor;
			yyt4 = NULL;
			yyt8 = NULL;
			yyt9 = NULL;
			goto yy3;
		case '?':
			yyt1 = NULL;
			yyt2 = cursor;
			yyt3 = cursor;
			yyt8 = NULL;
			goto yy4;
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z':
			yyt1 = NULL;
			yyt2 = cursor;
			yyt8 = NULL;
			goto yy5;
		default:
			if (limit - cursor < 1) goto yy9;
			yyt1 = NULL;
			yyt2 = cursor;
			yyt8 = NULL;
			goto yy1;
	}
yy1:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '#':
			yyt3 = cursor;
			yyt4 = NULL;
			yyt9 = NULL;
			goto yy3;
		case '?':
			yyt3 = cursor;
			goto yy4;
		default:
			if (limit - cursor < 1) {
				yyt3 = cursor;
				yyt4 = NULL;
				yyt5 = NULL;
				yyt6 = NULL;
				yyt7 = cursor;
				yyt9 = NULL;
				goto yy2;
			}
			goto yy1;
	}
yy2:
	s1 = yyt1;
	s2 = yyt8;
	ap1 = yyt2;
	ap2 = yyt3;
	q1 = yyt9;
	q2 = yyt4;
	f1 = yyt5;
	f2 = yyt6;
	e1 = yyt7;
	e2 = cursor;
#line 87 "source/uri.re"
	{
    if (e1 != e2)
        return {};

    if (s1)
    {
        priv->m_scheme.assign(s1, s2);
        priv->m_flags |= uri_flag_has_scheme;
    }

    if (q1)
    {
        if (!internal::parse_query(std::string_view(q1, q2 - q1), priv->m_query))
            return {};
        priv->m_flags |= uri_flag_has_query;
    }

    if (f1)
    {
        priv->m_fragment.assign(f1, f2);
        priv->m_flags |= uri_flag_has_fragment;
    }

    authority_and_path = std::string_view(ap1, ap2 - ap1);
    goto cont1;
}
#line 218 "source/uri.re.cpp"
yy3:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	if (yych <= 0x00) {
		if (limit - cursor < 1) {
			yyt5 = cursor;
			yyt6 = cursor;
			yyt7 = cursor;
			goto yy2;
		}
		yyt5 = cursor;
		goto yy6;
	}
	yyt5 = cursor;
	goto yy6;
yy4:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '#':
			yyt4 = cursor;
			yyt9 = cursor;
			goto yy3;
		default:
			if (limit - cursor < 1) {
				yyt4 = cursor;
				yyt5 = NULL;
				yyt6 = NULL;
				yyt7 = cursor;
				yyt9 = cursor;
				goto yy2;
			}
			yyt9 = cursor;
			goto yy7;
	}
yy5:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '#':
			yyt3 = cursor;
			yyt4 = NULL;
			yyt9 = NULL;
			goto yy3;
		case '+':
		case '-':
		case '.':
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy5;
		case ':':
			yyt8 = cursor;
			goto yy8;
		case '?':
			yyt3 = cursor;
			goto yy4;
		default:
			if (limit - cursor < 1) {
				yyt3 = cursor;
				yyt4 = NULL;
				yyt5 = NULL;
				yyt6 = NULL;
				yyt7 = cursor;
				yyt9 = NULL;
				goto yy2;
			}
			goto yy1;
	}
yy6:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	if (yych <= 0x00) {
		if (limit - cursor < 1) {
			yyt6 = cursor;
			yyt7 = cursor;
			goto yy2;
		}
		goto yy6;
	}
	goto yy6;
yy7:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '#':
			yyt4 = cursor;
			goto yy3;
		default:
			if (limit - cursor < 1) {
				yyt4 = cursor;
				yyt5 = NULL;
				yyt6 = NULL;
				yyt7 = cursor;
				goto yy2;
			}
			goto yy7;
	}
yy8:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '#':
			yyt1 = yyt2;
			yyt2 = cursor;
			yyt3 = cursor;
			yyt4 = NULL;
			yyt9 = NULL;
			goto yy3;
		case '?':
			yyt1 = yyt2;
			yyt2 = cursor;
			yyt3 = cursor;
			goto yy4;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt2;
				yyt2 = cursor;
				yyt3 = cursor;
				yyt4 = NULL;
				yyt5 = NULL;
				yyt6 = NULL;
				yyt7 = cursor;
				yyt9 = NULL;
				goto yy2;
			}
			yyt1 = yyt2;
			yyt2 = cursor;
			goto yy1;
	}
yy9:
#line 120 "source/uri.re"
	{
    return {};
}
#line 412 "source/uri.re.cpp"
}
#line 124 "source/uri.re"


    cont1: ;
    }

    {
        const char *cursor = authority_and_path.data();
        const char *limit = cursor + authority_and_path.size();
        const char *marker [[maybe_unused]];
        const char *u1, *u2, *x1, *x2, *h1, *h2, *o1, *o2, *p1, *p2, *e1, *e2;
        
#line 426 "source/uri.re.cpp"
const char *yyt1;
const char *yyt10;
const char *yyt11;
const char *yyt12;
const char *yyt13;
const char *yyt14;
const char *yyt2;
const char *yyt3;
const char *yyt4;
const char *yyt5;
const char *yyt6;
const char *yyt7;
const char *yyt8;
const char *yyt9;
#line 134 "source/uri.re"



#line 445 "source/uri.re.cpp"
{
	int yych;
	yyt1 = cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/': goto yy13;
		default:
			if (limit - cursor < 1) goto yy95;
			goto yy11;
	}
yy11:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	if (yych <= 0x00) {
		if (limit - cursor < 1) goto yy12;
		goto yy11;
	}
	goto yy11;
yy12:
	p1 = yyt1;
	p2 = cursor;
#line 192 "source/uri.re"
	{
    if (!unescape_to_string(std::string_view(p1, p2 - p1), escape_mode::path, &priv->m_path))
        return {};

    goto cont2;
}
#line 474 "source/uri.re.cpp"
yy13:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/': goto yy14;
		default:
			if (limit - cursor < 1) goto yy12;
			goto yy11;
	}
yy14:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt1 = NULL;
			yyt2 = NULL;
			yyt3 = NULL;
			yyt4 = NULL;
			yyt6 = NULL;
			yyt7 = NULL;
			yyt8 = NULL;
			yyt12 = NULL;
			yyt13 = cursor;
			goto yy17;
		case ':':
			yyt1 = NULL;
			yyt2 = NULL;
			yyt3 = NULL;
			yyt4 = NULL;
			yyt5 = cursor;
			yyt6 = NULL;
			yyt7 = NULL;
			yyt8 = NULL;
			yyt9 = cursor;
			yyt12 = NULL;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy18;
		case '@':
			yyt1 = NULL;
			yyt2 = NULL;
			yyt3 = NULL;
			yyt4 = NULL;
			yyt5 = cursor;
			yyt6 = cursor;
			yyt9 = cursor;
			goto yy19;
		case '[':
			yyt1 = NULL;
			yyt2 = NULL;
			yyt3 = NULL;
			yyt4 = NULL;
			yyt5 = cursor;
			yyt6 = cursor;
			goto yy20;
		default:
			if (limit - cursor < 1) {
				yyt1 = NULL;
				yyt2 = NULL;
				yyt3 = NULL;
				yyt4 = NULL;
				yyt6 = NULL;
				yyt7 = NULL;
				yyt8 = NULL;
				yyt12 = NULL;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt1 = NULL;
			yyt2 = NULL;
			yyt3 = NULL;
			yyt4 = NULL;
			yyt5 = cursor;
			yyt6 = cursor;
			goto yy16;
	}
yy15:
	u1 = yyt1;
	u2 = yyt2;
	x1 = yyt3;
	x2 = yyt4;
	h1 = yyt6;
	h2 = yyt7;
	o1 = yyt8;
	o2 = yyt12;
	p1 = yyt13;
	e1 = yyt14;
	p2 = yyt14;
	e2 = cursor;
#line 148 "source/uri.re"
	{
    if (e1 != e2)
        return {};
    priv->m_flags |= uri_flag_has_authority;

    if (u1)
    {
        if (!unescape_to_string(std::string_view(u1, u2 - u1), escape_mode::all, &priv->m_username))
            return {};
        priv->m_flags |= uri_flag_has_username;

        if (x1)
        {
            if (!unescape_to_string(std::string_view(x1, x2 - x1), escape_mode::all, &priv->m_password))
                return {};
            priv->m_flags |= uri_flag_has_password;
        }
    }

    if (h1)
    {
        if (!unescape_to_string(std::string_view(h1, h2 - h1), escape_mode::all, &priv->m_host))
            return {};
        priv->m_flags |= uri_flag_has_host;
    }

    if (!unescape_to_string(std::string_view(p1, p2 - p1), escape_mode::path, &priv->m_path))
        return {};

    if (o1)
    {
        unsigned int port = 0;
        for (const char *pp = o1; pp != o2; pp++)
            port = port * 10 + (*pp - '0');
        if (port >= 65536)
            return {};
        priv->m_port = (uint16_t)port;
        priv->m_flags |= uri_flag_has_port;
    }

    goto cont2;
}
#line 608 "source/uri.re.cpp"
yy16:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt7 = cursor;
			yyt8 = NULL;
			yyt12 = NULL;
			yyt13 = cursor;
			goto yy17;
		case ':':
			yyt7 = cursor;
			yyt9 = cursor;
			goto yy21;
		case '@':
			yyt7 = NULL;
			yyt9 = cursor;
			goto yy22;
		default:
			if (limit - cursor < 1) {
				yyt7 = cursor;
				yyt8 = NULL;
				yyt12 = NULL;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			goto yy16;
	}
yy17:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	if (yych <= 0x00) {
		if (limit - cursor < 1) {
			yyt14 = cursor;
			goto yy15;
		}
		goto yy17;
	}
	goto yy17;
yy18:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/': goto yy24;
		case '@':
			yyt10 = cursor;
			yyt11 = cursor;
			goto yy25;
		default:
			if (limit - cursor < 1) goto yy15;
			yyt10 = cursor;
			goto yy23;
	}
yy19:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt7 = cursor;
			yyt8 = NULL;
			yyt12 = NULL;
			yyt13 = cursor;
			goto yy17;
		case ':':
			yyt7 = cursor;
			goto yy27;
		case '[':
			yyt6 = cursor;
			goto yy28;
		default:
			if (limit - cursor < 1) {
				yyt7 = cursor;
				yyt8 = NULL;
				yyt12 = NULL;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt6 = cursor;
			goto yy26;
	}
yy20:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt7 = cursor;
			yyt8 = NULL;
			yyt12 = NULL;
			yyt13 = cursor;
			goto yy29;
		case ':':
			yyt7 = cursor;
			yyt9 = cursor;
			goto yy30;
		case '@':
			yyt9 = cursor;
			yyt10 = NULL;
			yyt11 = NULL;
			goto yy31;
		case ']': goto yy32;
		default:
			if (limit - cursor < 1) {
				yyt7 = cursor;
				yyt8 = NULL;
				yyt12 = NULL;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			goto yy20;
	}
yy21:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt8 = cursor;
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy17;
		case '0':
			yyt8 = cursor;
			yyt10 = cursor;
			goto yy33;
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			yyt8 = cursor;
			yyt10 = cursor;
			goto yy34;
		case '@':
			yyt8 = cursor;
			yyt10 = cursor;
			yyt11 = cursor;
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy25;
		default:
			if (limit - cursor < 1) {
				yyt8 = cursor;
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt8 = cursor;
			yyt10 = cursor;
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy23;
	}
yy22:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt7 = cursor;
			yyt8 = NULL;
			yyt12 = NULL;
			yyt13 = cursor;
			goto yy17;
		case ':':
			yyt7 = cursor;
			goto yy27;
		case '[':
			yyt3 = yyt7;
			yyt4 = yyt7;
			yyt6 = cursor;
			goto yy28;
		default:
			if (limit - cursor < 1) {
				yyt7 = cursor;
				yyt8 = NULL;
				yyt12 = NULL;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt3 = yyt7;
			yyt4 = yyt7;
			yyt6 = cursor;
			goto yy26;
	}
yy23:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/': goto yy24;
		case '@':
			yyt11 = cursor;
			goto yy25;
		default:
			if (limit - cursor < 1) goto yy15;
			goto yy23;
	}
yy24:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	if (yych <= 0x00) {
		if (limit - cursor < 1) goto yy15;
		goto yy24;
	}
	goto yy24;
yy25:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
		case ':': goto yy24;
		case '[':
			yyt3 = yyt10;
			yyt4 = yyt11;
			yyt6 = cursor;
			goto yy28;
		default:
			if (limit - cursor < 1) goto yy15;
			yyt3 = yyt10;
			yyt4 = yyt11;
			yyt6 = cursor;
			goto yy26;
	}
yy26:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt1 = yyt5;
			yyt2 = yyt9;
			yyt7 = cursor;
			yyt8 = NULL;
			yyt12 = NULL;
			yyt13 = cursor;
			goto yy17;
		case ':':
			yyt1 = yyt5;
			yyt2 = yyt9;
			yyt7 = cursor;
			goto yy27;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt7 = cursor;
				yyt8 = NULL;
				yyt12 = NULL;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			goto yy26;
	}
yy27:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt8 = cursor;
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy17;
		case '0':
			yyt8 = cursor;
			goto yy35;
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			yyt8 = cursor;
			goto yy36;
		default:
			if (limit - cursor < 1) {
				yyt8 = cursor;
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt8 = cursor;
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy24;
	}
yy28:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt1 = yyt5;
			yyt2 = yyt9;
			yyt7 = cursor;
			yyt8 = NULL;
			yyt12 = NULL;
			yyt13 = cursor;
			goto yy29;
		case ':':
			yyt7 = cursor;
			goto yy37;
		case ']': goto yy38;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt7 = cursor;
				yyt8 = NULL;
				yyt12 = NULL;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			goto yy28;
	}
yy29:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case ']': goto yy39;
		default:
			if (limit - cursor < 1) {
				yyt14 = cursor;
				goto yy15;
			}
			goto yy29;
	}
yy30:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt8 = cursor;
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy29;
		case '0':
			yyt8 = cursor;
			yyt10 = cursor;
			goto yy41;
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			yyt8 = cursor;
			yyt10 = cursor;
			goto yy42;
		case '@':
			yyt8 = cursor;
			yyt10 = cursor;
			yyt11 = cursor;
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy43;
		case ']':
			yyt10 = cursor;
			goto yy44;
		default:
			if (limit - cursor < 1) {
				yyt8 = cursor;
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt8 = cursor;
			yyt10 = cursor;
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy40;
	}
yy31:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt7 = cursor;
			yyt8 = NULL;
			yyt12 = NULL;
			yyt13 = cursor;
			goto yy29;
		case ':':
			yyt5 = yyt1;
			yyt9 = yyt2;
			yyt7 = cursor;
			goto yy37;
		case '[':
			yyt3 = yyt10;
			yyt4 = yyt11;
			yyt6 = cursor;
			goto yy28;
		case ']':
			yyt3 = yyt10;
			yyt4 = yyt11;
			yyt6 = cursor;
			goto yy26;
		default:
			if (limit - cursor < 1) {
				yyt7 = cursor;
				yyt8 = NULL;
				yyt12 = NULL;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt6 = cursor;
			goto yy45;
	}
yy32:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt7 = cursor;
			yyt8 = NULL;
			yyt12 = NULL;
			yyt13 = cursor;
			goto yy17;
		case ':':
			yyt7 = cursor;
			yyt9 = cursor;
			goto yy21;
		case '@':
			yyt7 = cursor;
			yyt8 = NULL;
			yyt9 = cursor;
			yyt10 = NULL;
			yyt12 = NULL;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy47;
		default:
			if (limit - cursor < 1) {
				yyt7 = cursor;
				yyt8 = NULL;
				yyt12 = NULL;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt7 = cursor;
			yyt8 = NULL;
			yyt12 = NULL;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy46;
	}
yy33:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy17;
		case '0': goto yy33;
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy34;
		case '@':
			yyt11 = cursor;
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy25;
		default:
			if (limit - cursor < 1) {
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy23;
	}
yy34:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy17;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy48;
		case '@':
			yyt11 = cursor;
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy25;
		default:
			if (limit - cursor < 1) {
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy23;
	}
yy35:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy17;
		case '0': goto yy35;
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy36;
		default:
			if (limit - cursor < 1) {
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy24;
	}
yy36:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy17;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy49;
		default:
			if (limit - cursor < 1) {
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy24;
	}
yy37:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt1 = yyt5;
			yyt2 = yyt9;
			yyt8 = cursor;
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy29;
		case '0':
			yyt8 = cursor;
			goto yy51;
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			yyt8 = cursor;
			goto yy52;
		case ']': goto yy53;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt8 = cursor;
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt8 = cursor;
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy50;
	}
yy38:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt1 = yyt5;
			yyt2 = yyt9;
			yyt7 = cursor;
			yyt8 = NULL;
			yyt12 = NULL;
			yyt13 = cursor;
			goto yy17;
		case ':':
			yyt1 = yyt5;
			yyt2 = yyt9;
			yyt7 = cursor;
			goto yy27;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt7 = cursor;
				yyt8 = NULL;
				yyt12 = NULL;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt7 = cursor;
			yyt8 = NULL;
			yyt12 = NULL;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy54;
	}
yy39:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt7 = cursor;
			yyt8 = NULL;
			yyt12 = NULL;
			yyt13 = cursor;
			goto yy17;
		case ':':
			yyt7 = cursor;
			goto yy27;
		default:
			if (limit - cursor < 1) {
				yyt7 = cursor;
				yyt8 = NULL;
				yyt12 = NULL;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt7 = cursor;
			yyt8 = NULL;
			yyt12 = NULL;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy24;
	}
yy40:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt5 = yyt1;
			yyt9 = yyt2;
			goto yy50;
		case '@':
			yyt11 = cursor;
			goto yy43;
		case ']': goto yy44;
		default:
			if (limit - cursor < 1) goto yy15;
			goto yy40;
	}
yy41:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy29;
		case '0': goto yy41;
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy42;
		case '@':
			yyt11 = cursor;
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy43;
		case ']': goto yy44;
		default:
			if (limit - cursor < 1) {
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy40;
	}
yy42:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy29;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy55;
		case '@':
			yyt11 = cursor;
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy43;
		case ']': goto yy44;
		default:
			if (limit - cursor < 1) {
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy40;
	}
yy43:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
		case ':':
			yyt5 = yyt1;
			yyt9 = yyt2;
			goto yy50;
		case '[':
			yyt3 = yyt10;
			yyt4 = yyt11;
			yyt6 = cursor;
			goto yy28;
		case ']':
			yyt3 = yyt10;
			yyt4 = yyt11;
			yyt6 = cursor;
			goto yy26;
		default:
			if (limit - cursor < 1) goto yy15;
			yyt6 = cursor;
			goto yy45;
	}
yy44:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt7 = cursor;
			yyt8 = NULL;
			yyt12 = NULL;
			yyt13 = cursor;
			goto yy17;
		case ':':
			yyt7 = cursor;
			goto yy56;
		case '@':
			yyt7 = cursor;
			yyt8 = NULL;
			yyt11 = cursor;
			yyt12 = NULL;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy25;
		default:
			if (limit - cursor < 1) {
				yyt7 = cursor;
				yyt8 = NULL;
				yyt12 = NULL;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt7 = cursor;
			yyt8 = NULL;
			yyt12 = NULL;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy23;
	}
yy45:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt7 = cursor;
			yyt8 = NULL;
			yyt12 = NULL;
			yyt13 = cursor;
			goto yy57;
		case ':':
			yyt7 = cursor;
			goto yy58;
		case ']':
			yyt3 = yyt10;
			yyt4 = yyt11;
			goto yy26;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt3 = yyt10;
				yyt4 = yyt11;
				yyt7 = cursor;
				yyt8 = NULL;
				yyt12 = NULL;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			goto yy45;
	}
yy46:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/': goto yy24;
		case ':':
			yyt9 = cursor;
			goto yy18;
		case '@':
			yyt9 = cursor;
			yyt10 = NULL;
			goto yy47;
		default:
			if (limit - cursor < 1) goto yy15;
			goto yy46;
	}
yy47:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
		case ':': goto yy24;
		case '[':
			yyt3 = yyt10;
			yyt4 = yyt10;
			yyt6 = cursor;
			goto yy28;
		default:
			if (limit - cursor < 1) goto yy15;
			yyt3 = yyt10;
			yyt4 = yyt10;
			yyt6 = cursor;
			goto yy26;
	}
yy48:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy17;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy59;
		case '@':
			yyt11 = cursor;
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy25;
		default:
			if (limit - cursor < 1) {
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy23;
	}
yy49:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy17;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy60;
		default:
			if (limit - cursor < 1) {
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy24;
	}
yy50:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case ']': goto yy53;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				goto yy15;
			}
			goto yy50;
	}
yy51:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt1 = yyt5;
			yyt2 = yyt9;
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy29;
		case '0': goto yy51;
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy52;
		case ']': goto yy53;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy50;
	}
yy52:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt1 = yyt5;
			yyt2 = yyt9;
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy29;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy61;
		case ']': goto yy53;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy50;
	}
yy53:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt1 = yyt5;
			yyt2 = yyt9;
			yyt7 = cursor;
			yyt8 = NULL;
			yyt12 = NULL;
			yyt13 = cursor;
			goto yy17;
		case ':':
			yyt1 = yyt5;
			yyt2 = yyt9;
			yyt7 = cursor;
			goto yy27;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt7 = cursor;
				yyt8 = NULL;
				yyt12 = NULL;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt1 = yyt5;
			yyt2 = yyt9;
			yyt7 = cursor;
			yyt8 = NULL;
			yyt12 = NULL;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy24;
	}
yy54:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
		case ':':
			yyt1 = yyt5;
			yyt2 = yyt9;
			goto yy24;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				goto yy15;
			}
			goto yy54;
	}
yy55:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy29;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy62;
		case '@':
			yyt11 = cursor;
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy43;
		case ']': goto yy44;
		default:
			if (limit - cursor < 1) {
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy40;
	}
yy56:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt8 = cursor;
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy17;
		case '0':
			yyt8 = cursor;
			goto yy33;
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			yyt8 = cursor;
			goto yy34;
		case '@':
			yyt8 = cursor;
			yyt11 = cursor;
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy25;
		default:
			if (limit - cursor < 1) {
				yyt8 = cursor;
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt8 = cursor;
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy23;
	}
yy57:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case ']': goto yy63;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt3 = yyt10;
				yyt4 = yyt11;
				yyt14 = cursor;
				goto yy15;
			}
			goto yy57;
	}
yy58:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt8 = cursor;
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy57;
		case '0':
			yyt8 = cursor;
			goto yy65;
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			yyt8 = cursor;
			goto yy66;
		case ']':
			yyt8 = cursor;
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy67;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt3 = yyt10;
				yyt4 = yyt11;
				yyt8 = cursor;
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt8 = cursor;
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy64;
	}
yy59:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy17;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy68;
		case '@':
			yyt11 = cursor;
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy25;
		default:
			if (limit - cursor < 1) {
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy23;
	}
yy60:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy17;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy69;
		default:
			if (limit - cursor < 1) {
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy24;
	}
yy61:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt1 = yyt5;
			yyt2 = yyt9;
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy29;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy70;
		case ']': goto yy53;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy50;
	}
yy62:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy29;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy71;
		case '@':
			yyt11 = cursor;
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy43;
		case ']': goto yy44;
		default:
			if (limit - cursor < 1) {
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy40;
	}
yy63:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case ':': goto yy72;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt3 = yyt10;
				yyt4 = yyt11;
				yyt14 = cursor;
				goto yy15;
			}
			yyt1 = yyt5;
			yyt2 = yyt9;
			yyt3 = yyt10;
			yyt4 = yyt11;
			goto yy17;
	}
yy64:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case ']': goto yy67;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt3 = yyt10;
				yyt4 = yyt11;
				goto yy15;
			}
			goto yy64;
	}
yy65:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy57;
		case '0': goto yy65;
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy66;
		case ']':
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy67;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt3 = yyt10;
				yyt4 = yyt11;
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy64;
	}
yy66:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy57;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy73;
		case ']':
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy67;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt3 = yyt10;
				yyt4 = yyt11;
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy64;
	}
yy67:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case 0x00:
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt3 = yyt10;
				yyt4 = yyt11;
				goto yy15;
			}
			yyt1 = yyt5;
			yyt2 = yyt9;
			yyt3 = yyt10;
			yyt4 = yyt11;
			goto yy24;
		case ':': goto yy75;
		default: goto yy76;
	}
yy68:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy17;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy77;
		case '@':
			yyt11 = cursor;
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy25;
		default:
			if (limit - cursor < 1) {
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy23;
	}
yy69:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy17;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy78;
		default:
			if (limit - cursor < 1) {
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy24;
	}
yy70:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt1 = yyt5;
			yyt2 = yyt9;
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy29;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy79;
		case ']': goto yy53;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy50;
	}
yy71:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy29;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy80;
		case '@':
			yyt11 = cursor;
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy43;
		case ']': goto yy44;
		default:
			if (limit - cursor < 1) {
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy40;
	}
yy72:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '0': goto yy72;
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy81;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt3 = yyt10;
				yyt4 = yyt11;
				yyt14 = cursor;
				goto yy15;
			}
			yyt1 = yyt5;
			yyt2 = yyt9;
			yyt3 = yyt10;
			yyt4 = yyt11;
			goto yy17;
	}
yy73:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy57;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy82;
		case ']':
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy67;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt3 = yyt10;
				yyt4 = yyt11;
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy64;
	}
yy74:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	if (yych <= 0x00) {
		if (limit - cursor < 1) {
			yyt1 = yyt5;
			yyt2 = yyt9;
			yyt3 = yyt10;
			yyt4 = yyt11;
			goto yy15;
		}
		goto yy74;
	}
	goto yy74;
yy75:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
yy76:
	switch (yych) {
		case '/': goto yy74;
		case '0': goto yy75;
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy83;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt3 = yyt10;
				yyt4 = yyt11;
				goto yy15;
			}
			yyt1 = yyt5;
			yyt2 = yyt9;
			yyt3 = yyt10;
			yyt4 = yyt11;
			goto yy24;
	}
yy77:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy17;
		case '@':
			yyt11 = cursor;
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy25;
		default:
			if (limit - cursor < 1) {
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy23;
	}
yy78:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy17;
		default:
			if (limit - cursor < 1) {
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy24;
	}
yy79:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt1 = yyt5;
			yyt2 = yyt9;
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy29;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy84;
		case ']': goto yy53;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy50;
	}
yy80:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy29;
		case '@':
			yyt11 = cursor;
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy43;
		case ']': goto yy44;
		default:
			if (limit - cursor < 1) {
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy40;
	}
yy81:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy85;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt3 = yyt10;
				yyt4 = yyt11;
				yyt14 = cursor;
				goto yy15;
			}
			yyt1 = yyt5;
			yyt2 = yyt9;
			yyt3 = yyt10;
			yyt4 = yyt11;
			goto yy17;
	}
yy82:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy57;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy86;
		case ']':
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy67;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt3 = yyt10;
				yyt4 = yyt11;
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy64;
	}
yy83:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/': goto yy74;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy87;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt3 = yyt10;
				yyt4 = yyt11;
				goto yy15;
			}
			yyt1 = yyt5;
			yyt2 = yyt9;
			yyt3 = yyt10;
			yyt4 = yyt11;
			goto yy24;
	}
yy84:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt1 = yyt5;
			yyt2 = yyt9;
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy29;
		case ']': goto yy53;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy50;
	}
yy85:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy88;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt3 = yyt10;
				yyt4 = yyt11;
				yyt14 = cursor;
				goto yy15;
			}
			yyt1 = yyt5;
			yyt2 = yyt9;
			yyt3 = yyt10;
			yyt4 = yyt11;
			goto yy17;
	}
yy86:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy57;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy89;
		case ']':
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy67;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt3 = yyt10;
				yyt4 = yyt11;
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy64;
	}
yy87:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/': goto yy74;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy90;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt3 = yyt10;
				yyt4 = yyt11;
				goto yy15;
			}
			yyt1 = yyt5;
			yyt2 = yyt9;
			yyt3 = yyt10;
			yyt4 = yyt11;
			goto yy24;
	}
yy88:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy91;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt3 = yyt10;
				yyt4 = yyt11;
				yyt14 = cursor;
				goto yy15;
			}
			yyt1 = yyt5;
			yyt2 = yyt9;
			yyt3 = yyt10;
			yyt4 = yyt11;
			goto yy17;
	}
yy89:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/':
			yyt12 = cursor;
			yyt13 = cursor;
			goto yy57;
		case ']':
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy67;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt3 = yyt10;
				yyt4 = yyt11;
				yyt12 = cursor;
				yyt13 = cursor;
				yyt14 = cursor;
				goto yy15;
			}
			yyt12 = cursor;
			yyt13 = cursor;
			yyt14 = cursor;
			goto yy64;
	}
yy90:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/': goto yy74;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy92;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt3 = yyt10;
				yyt4 = yyt11;
				goto yy15;
			}
			yyt1 = yyt5;
			yyt2 = yyt9;
			yyt3 = yyt10;
			yyt4 = yyt11;
			goto yy24;
	}
yy91:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy93;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt3 = yyt10;
				yyt4 = yyt11;
				yyt14 = cursor;
				goto yy15;
			}
			yyt1 = yyt5;
			yyt2 = yyt9;
			yyt3 = yyt10;
			yyt4 = yyt11;
			goto yy17;
	}
yy92:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/': goto yy74;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy94;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt3 = yyt10;
				yyt4 = yyt11;
				goto yy15;
			}
			yyt1 = yyt5;
			yyt2 = yyt9;
			yyt3 = yyt10;
			yyt4 = yyt11;
			goto yy24;
	}
yy93:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	if (yych <= 0x00) {
		if (limit - cursor < 1) {
			yyt1 = yyt5;
			yyt2 = yyt9;
			yyt3 = yyt10;
			yyt4 = yyt11;
			yyt14 = cursor;
			goto yy15;
		}
		yyt1 = yyt5;
		yyt2 = yyt9;
		yyt3 = yyt10;
		yyt4 = yyt11;
		goto yy17;
	}
	yyt1 = yyt5;
	yyt2 = yyt9;
	yyt3 = yyt10;
	yyt4 = yyt11;
	goto yy17;
yy94:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '/': goto yy74;
		default:
			if (limit - cursor < 1) {
				yyt1 = yyt5;
				yyt2 = yyt9;
				yyt3 = yyt10;
				yyt4 = yyt11;
				goto yy15;
			}
			yyt1 = yyt5;
			yyt2 = yyt9;
			yyt3 = yyt10;
			yyt4 = yyt11;
			goto yy24;
	}
yy95:
#line 200 "source/uri.re"
	{
    return {};
}
#line 2927 "source/uri.re.cpp"
}
#line 204 "source/uri.re"


    cont2: ;
    }

    priv->m_flags |= uri_flag_is_valid;
    return uri;
}

const std::string &uri::scheme() const noexcept
{
    if (!m_priv)
    {
        static std::string empty;
        return empty;
    }

    return m_priv->m_scheme;
}

const std::string &uri::username() const noexcept
{
    if (!m_priv)
    {
        static std::string empty;
        return empty;
    }

    return m_priv->m_username;
}

const std::string &uri::password() const noexcept
{
    if (!m_priv)
    {
        static std::string empty;
        return empty;
    }

    return m_priv->m_password;
}

const std::string &uri::host() const noexcept
{
    if (!m_priv)
    {
        static std::string empty;
        return empty;
    }

    return m_priv->m_host;
}

uint16_t uri::port() const noexcept
{
    return m_priv ? m_priv->m_port : 0;
}

const std::string &uri::path() const noexcept
{
    if (!m_priv)
    {
        static std::string empty;
        return empty;
    }

    return m_priv->m_path;
}

const std::vector<uri::attribute> &uri::query() const noexcept
{
    if (!m_priv)
    {
        static std::vector<uri::attribute> empty;
        return empty;
    }

    return m_priv->m_query;
}

const std::string &uri::fragment() const noexcept
{
    if (!m_priv)
    {
        static std::string empty;
        return empty;
    }

    return m_priv->m_fragment;
}

int uri::flags() const noexcept
{
    return m_priv ? m_priv->m_flags : 0;
}

static bool path_has_dos_drive(std::string_view path)
{
    if (path.length() < 2 || path[1] != ':')
        return false;
    char dl = path.front();
    return (dl >= 'a' && dl <= 'z') || (dl >= 'A' && dl <= 'Z');
};

static bool path_is_authority_compatible(std::string_view path)
{
    return path.empty() || path.front() == '/';
}

static bool path_is_authority_required(std::string_view path)
{
    return path.size() >= 2 && path[0] == '/' && path[1] == '/';
}

static std::string path_from_file_path(std::string_view fs_path, uri::path_style style)
{
    if (style == uri::path_style::dos)
    {
        std::string dos_path;
        if (path_has_dos_drive(fs_path))
        {
            dos_path.reserve(1 + fs_path.size());
            dos_path.push_back('/');
            dos_path.append(fs_path);
        }
        else
        {
            dos_path.assign(fs_path);
        }
        for (char &c : dos_path) if (c == '\\') c = '/';
        return dos_path;
    }
    else
    {
        return std::string(fs_path);
    }
}

uri uri::make_file_uri(std::string_view path, path_style style)
{
    uri uri;
    internal *priv = new internal;
    uri.m_priv.reset(priv);

    priv->m_scheme.assign("file");
    priv->m_flags |= uri_flag_has_scheme;

    priv->m_path = path_from_file_path(path, style);

    if (path_is_authority_compatible(priv->m_path))
        priv->m_flags |= uri_flag_has_authority;

    priv->m_flags |= uri_flag_is_valid;
    return uri;
}

uri uri::make_native_file_uri(std::string_view path)
{
#if defined(_WIN32)
    return make_file_uri(path, path_style::dos);
#else
    return make_file_uri(path, path_style::generic);
#endif
}

static std::string path_to_file_path(std::string_view uri_path, uri::path_style style)
{
    if (style == uri::path_style::dos)
    {
        bool has_slash_dos_drive =
            !uri_path.empty() && uri_path.front() == '/' &&
            path_has_dos_drive(uri_path.substr(1));
        std::string dos_path(
            uri_path.begin() + (has_slash_dos_drive ? 1 : 0), uri_path.end());
        for (char &c : dos_path) if (c == '/') c = '\\';
        return dos_path;
    }
    else
    {
        return std::string(uri_path);
    }
}

std::string uri::file_path(path_style style) const
{
    return path_to_file_path(m_priv->m_path, style);
}

std::string uri::native_file_path() const
{
#if defined(_WIN32)
    return file_path(path_style::dos);
#else
    return file_path(path_style::generic);
#endif
}

void uri::escape(std::string_view string, escape_mode mode, void *ctx, void (*write)(void *, const char *, size_t))
{
    {
        const char *cursor = string.data();
        const char *limit = cursor + string.size();

        for (;;)
        {
            const char *marker [[maybe_unused]];
            const char *p1, *p2;
            
#line 3138 "source/uri.re.cpp"
const char *yyt1;
#line 411 "source/uri.re"


            auto hex_encode = [](uint8_t byte, char hex[2])
            {
                const char digit[] = "0123456789abcdef";
                hex[0] = digit[byte >> 4];
                hex[1] = digit[byte & 15];
            };


#line 3151 "source/uri.re.cpp"
{
	int yych;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case ' ': goto yy98;
		case '-':
		case '.':
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z':
		case '~':
			yyt1 = cursor;
			goto yy99;
		case '/': goto yy101;
		case ':':
		case '@': goto yy102;
		default:
			if (limit - cursor < 1) goto yy103;
			goto yy97;
	}
yy97:
	++cursor;
	p1 = cursor;
	p1 += -1;
#line 469 "source/uri.re"
	{
    char hex[3];
    hex[0] = '%';
    hex_encode(*p1, hex + 1);
    write(ctx, hex, 3);
    goto next;
}
#line 3244 "source/uri.re.cpp"
yy98:
	++cursor;
#line 446 "source/uri.re"
	{
    char esc = (mode == escape_mode::query) ? '+' : ' ';
    write(ctx, &esc, 1);
    goto next;
}
#line 3253 "source/uri.re.cpp"
yy99:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '-':
		case '.':
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z':
		case '~': goto yy99;
		default: goto yy100;
	}
yy100:
	p1 = yyt1;
	p2 = cursor;
#line 424 "source/uri.re"
	{
    write(ctx, p1, p2 - p1);
    goto next;
}
#line 3334 "source/uri.re.cpp"
yy101:
	++cursor;
#line 430 "source/uri.re"
	{
    if (mode == escape_mode::path)
    {
        write(ctx, "/", 1);
    }
    else
    {
        char hex[3];
        hex[0] = '%';
        hex_encode('/', hex + 1);
        write(ctx, hex, 3);
    }
    goto next;
}
#line 3352 "source/uri.re.cpp"
yy102:
	++cursor;
	p1 = cursor;
	p1 += -1;
#line 453 "source/uri.re"
	{
    if (mode == escape_mode::path || (mode == escape_mode::path_no_colon && *p1 != ':'))
    {
        write(ctx, p1, 1);
    }
    else
    {
        char hex[3];
        hex[0] = '%';
        hex_encode(*p1, hex + 1);
        write(ctx, hex, 3);
    }
    goto next;
}
#line 3372 "source/uri.re.cpp"
yy103:
#line 478 "source/uri.re"
	{
    return;
}
#line 3378 "source/uri.re.cpp"
}
#line 482 "source/uri.re"

        next: ;
        }
    }
}

bool uri::unescape(std::string_view string, escape_mode mode, void *ctx, void (*write)(void *, const char *, size_t))
{
    {
        const char *cursor = string.data();
        const char *limit = cursor + string.size();

        auto hex_digit = [](char c) -> unsigned int
        {
            if (c >= '0' && c <= '9') return (c - '0');
            if (c >= 'a' && c <= 'f') return (c - 'a') + 10;
            if (c >= 'A' && c <= 'F') return (c - 'A') + 10;
            return 0x100;
        };

        for (;;)
        {
            const char *marker [[maybe_unused]];
            const char *p1, *p2;
            
#line 3406 "source/uri.re.cpp"
const char *yyt1;
#line 506 "source/uri.re"



#line 3412 "source/uri.re.cpp"
{
	int yych;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '%': goto yy107;
		case '+': goto yy109;
		default:
			if (limit - cursor < 1) goto yy113;
			yyt1 = cursor;
			goto yy105;
	}
yy105:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '%':
		case '+': goto yy106;
		default:
			if (limit - cursor < 1) goto yy106;
			goto yy105;
	}
yy106:
	p1 = yyt1;
	p2 = cursor;
#line 531 "source/uri.re"
	{
    write(ctx, p1, p2 - p1);
    goto next;
}
#line 3442 "source/uri.re.cpp"
yy107:
	++cursor;
	marker = cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f': goto yy110;
		default: goto yy108;
	}
yy108:
#line 519 "source/uri.re"
	{
    return false;
}
#line 3477 "source/uri.re.cpp"
yy109:
	++cursor;
#line 524 "source/uri.re"
	{
    char c = (mode == escape_mode::query) ? ' ' : '+';
    write(ctx, &c, 1);
    goto next;
}
#line 3486 "source/uri.re.cpp"
yy110:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f': goto yy112;
		default: goto yy111;
	}
yy111:
	cursor = marker;
	goto yy108;
yy112:
	++cursor;
	p1 = cursor;
	p1 += -2;
	p2 = cursor;
#line 512 "source/uri.re"
	{
    char c = (char)((uint8_t)((hex_digit(p1[0]) << 4) | hex_digit(p1[1])));
    write(ctx, &c, 1);
    goto next;
}
#line 3529 "source/uri.re.cpp"
yy113:
#line 537 "source/uri.re"
	{
    return true;
}
#line 3535 "source/uri.re.cpp"
}
#line 541 "source/uri.re"

        next: ;
        }
    }
}

void uri::escape_to_string(std::string_view string, escape_mode mode, std::string *result)
{
    size_t count = 0;
    escape(string, mode, &count, [](void *ctx, const char *, size_t len)
    {
        *reinterpret_cast<size_t *>(ctx) += len;
    });

    result->reserve(result->size() + count);
    escape(string, mode, result, [](void *ctx, const char *str, size_t len)
    {
        reinterpret_cast<std::string *>(ctx)->append(str, len);
    });
}

bool uri::unescape_to_string(std::string_view string, escape_mode mode, std::string *result)
{
    size_t count = 0;
    bool success;

    success = unescape(string, mode, &count, [](void *ctx, const char *, size_t len)
    {
        *reinterpret_cast<size_t *>(ctx) += len;
    });
    if (!success)
        return false;

    result->reserve(result->size() + count);
    success = unescape(string, mode, result, [](void *ctx, const char *str, size_t len)
    {
        reinterpret_cast<std::string *>(ctx)->append(str, len);
    });
    return success;
}

bool uri::internal::parse_query(std::string_view string, std::vector<attribute> &qa)
{
    const char *cursor = string.data();
    const char *limit = cursor + string.size();

    for (;;)
    {
        const char *marker [[maybe_unused]];
        const char *k1, *k2, *v1, *v2;
        
#line 3589 "source/uri.re.cpp"
const char *yyt1;
const char *yyt2;
const char *yyt3;
const char *yyt4;
#line 591 "source/uri.re"



#line 3598 "source/uri.re.cpp"
{
	int yych;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '&':
			yyt1 = cursor;
			yyt2 = cursor;
			yyt3 = NULL;
			yyt4 = NULL;
			goto yy117;
		case '=':
			yyt1 = cursor;
			yyt2 = cursor;
			goto yy118;
		default:
			if (limit - cursor < 1) goto yy120;
			yyt1 = cursor;
			goto yy115;
	}
yy115:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '&':
			yyt2 = cursor;
			yyt3 = NULL;
			yyt4 = NULL;
			goto yy117;
		case '=':
			yyt2 = cursor;
			goto yy118;
		default:
			if (limit - cursor < 1) {
				yyt2 = cursor;
				yyt3 = NULL;
				yyt4 = NULL;
				goto yy116;
			}
			goto yy115;
	}
yy116:
	k1 = yyt1;
	k2 = yyt2;
	v1 = yyt4;
	v2 = yyt3;
#line 597 "source/uri.re"
	{
    attribute a;
    if (!unescape_to_string(std::string_view(k1, k2 - k1), escape_mode::query, &a.key))
        return false;
    if (v1)
    {
        if (!unescape_to_string(std::string_view(v1, v2 - v1), escape_mode::query, &a.value))
            return false;
        a.has_value = true;
    }
    qa.push_back(std::move(a));
    goto next;
}
#line 3658 "source/uri.re.cpp"
yy117:
	++cursor;
	goto yy116;
yy118:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '&':
			yyt3 = cursor;
			yyt4 = cursor;
			goto yy117;
		default:
			if (limit - cursor < 1) {
				yyt3 = cursor;
				yyt4 = cursor;
				goto yy116;
			}
			yyt4 = cursor;
			goto yy119;
	}
yy119:
	++cursor;
	yych = cursor < limit ? (unsigned char)*cursor : 0;
	switch (yych) {
		case '&':
			yyt3 = cursor;
			goto yy117;
		default:
			if (limit - cursor < 1) {
				yyt3 = cursor;
				goto yy116;
			}
			goto yy119;
	}
yy120:
#line 612 "source/uri.re"
	{
    return true;
}
#line 3698 "source/uri.re.cpp"
}
#line 616 "source/uri.re"

    next: ;
    }
}

void uri::format(void *ctx, void (*write)(void *, const char *, size_t)) const
{
    const internal *priv = m_priv.get();
    const int flags = priv ? priv->m_flags : 0;

    if (!(flags & uri_flag_is_valid))
        return;

    if (flags & uri_flag_has_scheme)
    {
        write(ctx, priv->m_scheme.data(), priv->m_scheme.size());
        write(ctx, ":", 1);
    }

    if (flags & uri_flag_has_authority)
    {
        write(ctx, "//", 2);
        if (flags & uri_flag_has_username)
        {
            uri::escape(priv->m_username, escape_mode::all, ctx, write);
            if (flags & uri_flag_has_password)
            {
                write(ctx, ":", 1);
                uri::escape(priv->m_password, escape_mode::all, ctx, write);
            }
            write(ctx, "@", 1);
        }
        uri::escape(priv->m_host, escape_mode::all, ctx, write);
        if (flags & uri_flag_has_port)
        {
            write(ctx, ":", 1);

            char port_buffer[8];
            char *port_string_end = &port_buffer[8];
            char *port_string = port_string_end;
            for (int x = priv->m_port; x > 0; x /= 10)
                *--port_string = '0' + (x % 10);
            if (*port_string == '\0')
                *--port_string = '0';

            write(ctx, port_string, port_string_end - port_string);
        }
    }

    {
        std::string_view path(priv->m_path);
        size_t pos = path.find('/');

        if (pos == path.npos)
        {
            uri::escape(path, escape_mode::path_no_colon, ctx, write);
        }
        else
        {
            uri::escape(path.substr(0, pos), escape_mode::path_no_colon, ctx, write);
            uri::escape(path.substr(pos), escape_mode::path, ctx, write);
        }
    }

    if (flags & uri_flag_has_query)
    {
        write(ctx, "?", 1);

        bool first = true;
        for (const attribute &qa : m_priv->m_query)
        {
            if (!first)
            {
                write(ctx, "&", 1);
            }
            uri::escape(qa.key, escape_mode::query, ctx, write);
            if (qa.has_value)
            {
                write(ctx, "=", 1);
                uri::escape(qa.value, escape_mode::query, ctx, write);
            }
            first = false;
        }
    }

    if (flags & uri_flag_has_fragment)
    {
        write(ctx, "#", 1);
        uri::escape(priv->m_fragment, escape_mode::all, ctx, write);
    }
}

std::string uri::to_string() const
{
    size_t count = 0;
    format(&count, [](void *ctx, const char *, size_t len)
    {
        *reinterpret_cast<size_t *>(ctx) += len;
    });

    std::string str;
    str.reserve(count);
    format(&str, [](void *ctx, const char *str, size_t len)
    {
        reinterpret_cast<std::string *>(ctx)->append(str, len);
    });

    return str;
}

template <typename T, class Hash = std::hash<T>>
static void hash_combine(size_t &seed, const T &val)
{
    seed ^= Hash{}(val) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

size_t uri::hash_code(size_t seed) const noexcept
{
    uint32_t tag =
        (uint32_t)'U' |
        ((uint32_t)'R' << 8) |
        ((uint32_t)'I' << 16) |
        ((uint32_t)' ' << 24);

    hash_combine(seed, tag);
    if (m_priv)
        seed = m_priv->hash_code(seed);
    return seed;
}

size_t uri::internal::hash_code(size_t seed) const noexcept
{
    hash_combine(seed, m_flags);

    if (m_flags & uri_flag_has_scheme)
        hash_combine(seed, m_scheme);

    if (m_flags & uri_flag_has_username)
        hash_combine(seed, m_username);

    if (m_flags & uri_flag_has_password)
        hash_combine(seed, m_password);

    if (m_flags & uri_flag_has_host)
        hash_combine(seed, m_host);

    if (m_flags & uri_flag_has_port)
        hash_combine(seed, m_port);

    hash_combine(seed, m_path);

    if (m_flags & uri_flag_has_query)
    {
        hash_combine(seed, m_query.size());

        for (const attribute &qa : m_query)
        {
            hash_combine(seed, qa.key);
            if (qa.has_value)
                hash_combine(seed, qa.value);
        }
    }

    if (m_flags & uri_flag_has_fragment)
        hash_combine(seed, m_fragment);

    return seed;
}

template <class T>
static int generic_compare(const T &a, const T &b)
{
    return (a == b) ? 0 : (a < b) ? -1 : +1;
}

static int string_compare(const std::string &a, const std::string &b)
{
    return strcmp(a.c_str(), b.c_str());
}

int uri::compare(const uri &other) const noexcept
{
    int order = generic_compare(bool(m_priv), bool(other.m_priv));
    if (order != 0)
        return order;

    return m_priv ? m_priv->compare(*other.m_priv) : 0;
}

int uri::internal::compare(const internal &other) const noexcept
{
    {
        int order = generic_compare(m_flags, other.m_flags);
        if (order != 0)
            return order;
    }

    if (m_flags & uri_flag_has_scheme)
    {
        int order = string_compare(m_scheme, other.m_scheme);
        if (order != 0)
            return order;
    }

    if (m_flags & uri_flag_has_username)
    {
        int order = string_compare(m_username, other.m_username);
        if (order != 0)
            return order;
    }

    if (m_flags & uri_flag_has_password)
    {
        int order = string_compare(m_password, other.m_password);
        if (order != 0)
            return order;
    }

    if (m_flags & uri_flag_has_host)
    {
        int order = string_compare(m_host, other.m_host);
        if (order != 0)
            return order;
    }

    if (m_flags & uri_flag_has_port)
    {
        int order = generic_compare(m_port, other.m_port);
        if (order != 0)
            return order;
    }

    {
        int order = string_compare(m_path, other.m_path);
        if (order != 0)
            return order;
    }

    if (m_flags & uri_flag_has_query)
    {
        int order = generic_compare(m_query.size(), other.m_query.size());
        if (order != 0)
            return order;

        for (size_t i = 0; i < m_query.size(); i++)
        {
            const attribute &a = m_query[i];
            const attribute &b = other.m_query[i];

            order = string_compare(a.key, b.key);
            if (order != 0)
                return order;

            order = generic_compare(a.has_value, b.has_value);
            if (order != 0)
                return order;

            order = string_compare(a.value, b.value);
            if (order != 0)
                return order;
        }
    }

    if (m_flags & uri_flag_has_fragment)
    {
        int order = string_compare(m_fragment, other.m_fragment);
        if (order != 0)
            return order;
    }

    return 0;
}

bool uri::operator==(const uri &other) const noexcept
{
    if (bool(m_priv) != bool(other.m_priv))
        return false;

    return m_priv ? (*m_priv == *other.m_priv) : true;
}

bool uri::internal::operator==(const internal &other) const noexcept
{
    if (m_flags != other.m_flags)
        return false;

    if (m_flags & uri_flag_has_scheme)
    {
        if (m_scheme != other.m_scheme)
            return false;
    }

    if (m_flags & uri_flag_has_username)
    {
        if (m_username != other.m_username)
            return false;
    }

    if (m_flags & uri_flag_has_password)
    {
        if (m_password != other.m_password)
            return false;
    }

    if (m_flags & uri_flag_has_host)
    {
        if (m_host != other.m_host)
            return false;
    }

    if (m_flags & uri_flag_has_port)
    {
        if (m_port != other.m_port)
            return false;
    }

    if (m_path != other.m_path)
        return false;

    if (m_flags & uri_flag_has_query)
    {
        if (m_query.size() != other.m_query.size())
            return false;

        for (size_t i = 0; i < m_query.size(); i++)
        {
            const attribute &a = m_query[i];
            const attribute &b = other.m_query[i];

            if (a.key != b.key)
                return false;

            if (a.has_value != b.has_value)
                return false;

            if (a.has_value && a.value != b.value)
                return false;
        }
    }

    if (m_flags & uri_flag_has_fragment)
    {
        if (m_fragment != other.m_fragment)
            return false;
    }

    return true;
}

void uri::internal_delete::operator()(internal *x) const noexcept
{
    delete x;
}

enum
{
    uri_builder_flag_has_scheme = (1 << 0),
    uri_builder_flag_prefer_authority = (1 << 1),
    uri_builder_flag_has_username = (1 << 2),
    uri_builder_flag_has_password = (1 << 3),
    uri_builder_flag_has_host = (1 << 4),
    uri_builder_flag_has_port = (1 << 5),
    uri_builder_flag_has_fragment = (1 << 6),
};

struct uri_builder::internal
{
    int m_flags = 0;
    std::string m_scheme;
    std::string m_username;
    std::string m_password;
    std::string m_host;
    int m_port = 0;
    std::string m_path;
    std::vector<uri::attribute> m_query;
    std::string m_fragment;
};

uri_builder::uri_builder()
    : m_priv(new internal)
{
}

void uri_builder::set_scheme(std::string scheme)
{
    m_priv->m_scheme = std::move(scheme);
    m_priv->m_flags |= uri_builder_flag_has_scheme;
}

void uri_builder::prefer_authority(bool prefer)
{
    if (prefer)
        m_priv->m_flags |= uri_builder_flag_prefer_authority;
    else
        m_priv->m_flags &= ~uri_builder_flag_prefer_authority;
}

void uri_builder::set_username(std::string username)
{
    m_priv->m_username = std::move(username);
    m_priv->m_flags |= uri_builder_flag_has_username;
}

void uri_builder::set_password(std::string password)
{
    m_priv->m_password = std::move(password);
    m_priv->m_flags |= uri_builder_flag_has_password;
}

void uri_builder::set_host(std::string host)
{
    m_priv->m_host = std::move(host);
    m_priv->m_flags |= uri_builder_flag_has_host;
}

void uri_builder::set_port(int port)
{
    m_priv->m_port = port;
    m_priv->m_flags |= uri_builder_flag_has_port;
}

void uri_builder::set_path(std::string path)
{
    m_priv->m_path = std::move(path);
}

void uri_builder::add_query_attribute(std::string key)
{
    uri::attribute qa;
    qa.key = std::move(key);
    m_priv->m_query.push_back(std::move(qa));
}

void uri_builder::add_query_attribute(std::string key, std::string value)
{
    uri::attribute qa;
    qa.key = std::move(key);
    qa.value = std::move(value);
    qa.has_value = true;
    m_priv->m_query.push_back(std::move(qa));
}

void uri_builder::set_fragment(std::string fragment)
{
    m_priv->m_fragment = std::move(fragment);
    m_priv->m_flags |= uri_builder_flag_has_fragment;
}

uri uri_builder::build()
{
    uri uri;
    uri.m_priv.reset(new uri::internal);

    auto validate_scheme = [](std::string_view scheme) -> bool
    {
        if (scheme.empty())
            return false;

        char c = scheme.front();
        bool valid = (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
        if (!valid)
            return false;

        for (size_t i = 1; i < scheme.size(); ++i)
        {
            c = scheme[i];
            valid = (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') ||
                (c >= '0' && c <= '9') || (c == '+') || (c == '.') || (c == '-');
            if (!valid)
                return false;
        }

        return true;
    };

    auto validate_host = [](std::string_view host) -> bool
    {
        if (host.empty())
            return false;

        if (host.front() == '[')
        {
            if (host.find(']') != host.size() - 1)
                return false;
        }
        else
        {
            if (host.find_first_of("/:") != host.npos)
                return false;
        }

        return true;
    };

    auto validate_port = [](int port) -> bool
    {
        return port >= 0 && port < 65536;
    };

    if (m_priv->m_flags & uri_builder_flag_has_scheme)
    {
        if (!validate_scheme(m_priv->m_scheme))
            return {};

        uri.m_priv->m_scheme = std::move(m_priv->m_scheme);
        uri.m_priv->m_flags |= uri::uri_flag_has_scheme;
    }

    if (m_priv->m_flags & uri_builder_flag_has_username)
    {
        uri.m_priv->m_username = std::move(m_priv->m_username);
        uri.m_priv->m_flags |= uri::uri_flag_has_username;
    }

    if (m_priv->m_flags & uri_builder_flag_has_password)
    {
        uri.m_priv->m_password = std::move(m_priv->m_password);
        uri.m_priv->m_flags |= uri::uri_flag_has_password;
    }

    if (m_priv->m_flags & uri_builder_flag_has_host)
    {
        if (!validate_host(m_priv->m_host))
            return {};

        uri.m_priv->m_host = std::move(m_priv->m_host);
        uri.m_priv->m_flags |= uri::uri_flag_has_host|uri::uri_flag_has_authority;
    }

    if (m_priv->m_flags & uri_builder_flag_has_port)
    {
        if (!validate_port(m_priv->m_port))
            return {};

        uri.m_priv->m_port = m_priv->m_port;
        uri.m_priv->m_flags |= uri::uri_flag_has_port;
    }

    if (path_is_authority_compatible(m_priv->m_path))
    {
        if ((m_priv->m_flags & uri_builder_flag_prefer_authority) ||
            path_is_authority_required(m_priv->m_path))
        {
            uri.m_priv->m_flags |= uri::uri_flag_has_authority;
        }
    }
    else if (uri.m_priv->m_flags & uri::uri_flag_has_authority)
    {
        return {};
    }

    uri.m_priv->m_path = std::move(m_priv->m_path);

    if (!m_priv->m_query.empty())
    {
        uri.m_priv->m_query = std::move(m_priv->m_query);
        uri.m_priv->m_flags |= uri::uri_flag_has_query;
    }

    if (m_priv->m_flags & uri_builder_flag_has_fragment)
    {
        uri.m_priv->m_fragment = std::move(m_priv->m_fragment);
        uri.m_priv->m_flags |= uri::uri_flag_has_fragment;
    }

    uri.m_priv->m_flags |= uri::uri_flag_is_valid;
    return uri;
}

void uri_builder::internal_delete::operator()(internal *x) const noexcept
{
    delete x;
}

}
// namespace sel
